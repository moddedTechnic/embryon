default_job = "check"

[jobs.check]
command = ["cargo", "check", "--color", "always"]
need_stdout = false

[jobs.check-all]
command = ["cargo", "check", "--all-targets", "--color", "always"]
need_stdout = false

[jobs.clippy]
command = [
    "cargo", "clippy",
    "--all-targets",
    "--color", "always",
	"--",
	"-W", "clippy::derive_partial_eq_without_eq",
    "-W", "clippy::if_not_else",
	"-W", "clippy::if_then_some_else_none",
    "-W", "clippy::ignored_unit_patterns",
]
need_stdout = false

[jobs.clippy-strict]
command = [
    "cargo", "clippy",
    "--all-targets",
    "--color", "always",
	"--",
	"-W", "clippy::derive_partial_eq_without_eq",
	"-W", "clippy::if_then_some_else_none",
    "-W", "clippy::ignored_unit_patterns",

    # enable pedantic lints
    "-W", "clippy::pedantic",
    "-W", "clippy::panic",
    "-D", "clippy::panic_in_result_fn",
    # allow documentation errors
    "-A", "clippy::missing_errors_doc",
    "-A", "clippy::missing_panics_doc",
]
need_stdout = false

[jobs.check-fmt]
command = [
    "cargo", "fmt", "--check",
]
need_stdout = true

[jobs.test]
command = [
    "cargo", "test", "--color", "always",
    "--", "--color", "always", # see https://github.com/Canop/bacon/issues/124
]
need_stdout = true

[jobs.doc]
command = ["cargo", "doc", "--color", "always", "--no-deps"]
need_stdout = false

# If the doc compiles, then it opens in your browser and bacon switches
# to the previous job
[jobs.doc-open]
command = ["cargo", "doc", "--color", "always", "--no-deps", "--open"]
need_stdout = false
on_success = "back" # so that we don't open the browser at each change

# You can run your application and have the result displayed in bacon,
# *if* it makes sense for this crate. You can run an example the same
# way. Don't forget the `--color always` part or the errors won't be
# properly parsed.
[jobs.run]
command = [
    "cargo", "run",
    "--color", "always",
    # put launch parameters for your program behind a `--` separator
]
need_stdout = true
allow_warnings = true

# You may define here keybindings that would be specific to
# a project, for example a shortcut to launch a specific job.
# Shortcuts to internal functions (scrolling, toggling, etc.)
# should go in your personal global prefs.toml file instead.
[keybindings]
# alt-m = "job:my-job"
